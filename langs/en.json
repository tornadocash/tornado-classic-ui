{
  "closeNotification": "Close notification",
  "indexNotification": "Tornado.cash {link}. However, it is still an experimental software. Please use at your own risk.",
  "indexNotificationLinkText": "was audited",
  "binanceInternalTxsNotification": "Please, do not use Binance wallet addresses for withdrawals. Internal transactions (including Tornado.cash withdrawals) are not currently supported on Binance Exchange. If you have an issue receiving your funds, you should contact Binance support.",
  "deposit": "Deposit",
  "depositButton": "Deposit",
  "withdraw": "Withdraw",
  "withdrawButton": "Withdraw",
  "waitUntilTransactionIsMined": "Wait until transaction is mined",
  "enterYourDepositsNote": "Enter the note from your deposit",
  "yourWallet": "Your Wallet",
  "pleaseSelectYourWeb3Wallet": "Please select your Web3 compatible wallet:",
  "otherWallet": "Other Wallet",
  "currentNetworkIsNotSupported": "Current network is not supported",
  "pleaseChangeNetwork": "App network ({network}) doesn't match the network selected in wallet.",
  "docs": "Docs",
  "getFreeGETH": "Get Free gETH",
  "logout": "Logout",
  "connect": "Connect",
  "token": "Token",
  "amount": "Amount",
  "amountTooltip": "Each amount is a standalone Tornado Cash instance with a separate anonymity set. Check the Stats tab for more info.",
  "approvalIsRequired": "Approval is required",
  "inOrderToUse": "In order to use {currency} you have to enable it for Tornado.cash. Select the amount you would like to approve:",
  "unlimited": "Unlimited",
  "unlimitedTooltip": "The unlimited approval is more convenient if you are going to make multiple deposits.",
  "enable": "Enable",
  "transactionWasSuccessfullySent": "The transaction was successfully sent.",
  "insufficientBalance": "Insufficient balance",
  "youDontHaveEnoughTokens": "You do not have enough {currency} tokens. Your current balance is {balance} {currency}",
  "close": "Close",
  "yourNote": "Your private note",
  "pleaseBackupYourNote": "Please back up your note. You will need it later to withdraw your deposit.",
  "treatYourNote": "Treat your note as a private key - never share it with anyone, including tornado.cash developers.",
  "saveAsFile": "The browser will ask to save your note as a file:",
  "iBackedUpTheNote": "I backed up the note",
  "iEncryptedTheNote": "Create an on-chain backup of this note with your Account {address}",
  "yourNoteWontBeSaved": "Your note won't be saved in your browser. Please make sure it's backed up!",
  "yourDontHaveAccount": "You can also save encrypted notes on-chain by setting up the Note Account. Create one on the {account} page.",
  "sendDeposit": "Send Deposit",
  "clickToCopy": "Click to copy",
  "copied": "Copied!",
  "preparingTransactionData": "Preparing Transaction Data",
  "viewInExplorer": "View in Explorer",
  "loading": "Loading",
  "pleaseConfirmInWallet": "Please confirm permission to provide public key in metamask",
  "pleaseConfirmTransactionInWallet": "Please confirm transaction in {wallet}",
  "pleaseSignRequestInWallet": "Please sign request in {wallet}",
  "waitingForTransactionConfirmation": "Waiting for transaction confirmation",
  "relayerIsNowSendingYourTransaction": "Relayer is now sending your transaction. It will respond with a transaction hash soon",
  "note": "Note",
  "noteTooltip": "Please enter the note you received after deposit was made",
  "depositTransactionOnEtherscan": "Deposit transaction on Etherscan",
  "withdrawalSettings": "Withdrawal settings",
  "pleaseEnterYourNote": "Please enter your note",
  "turnOnWasm": "Error: Please turn on WebAssembly in your browser settings.<br /> If you are using Tor browser, enable javascript.options.wasm in about:config",
  "timePassed": "Time passed",
  "timePassedTooltip": "Even if multiple deposits were made after yours, they could have been made by the same user. Therefore, we recommend waiting for at least 24 hours before withdrawing funds to ensure that multiple other users transacted via Tornado.сash during that time.",
  "subsequentDeposits": "Subsequent deposits",
  "subsequentDepositsTooltip": "The most likely source of a withdrawal points to recent deposits. Therefore, we recommend allowing at least 5 deposits after yours for better anonymity.",
  "recipientAddress": "Recipient Address",
  "donate": "Donate",
  "pleasePasteAddressHere": "Please paste address here",
  "noteIsInvalid": "Note is invalid",
  "noteHasBeenSpent": "Note has been spent",
  "gettingTheNoteData": "Getting the note data",
  "noteWasAlreadySpent": "Note has already been spent",
  "error": "Error",
  "downloadError": "Download error",
  "validationError": "Validation Error",
  "recipientAddressIsInvalid": "Recipient address is invalid",
  "total": "Total",
  "noteBalance": "Note balance",
  "relayerFee": "Relayer fee",
  "ethPurchase": "{currency} Purchase",
  "ethPurchaseTooltip": "Exchange some of your deposit's {currency} to {networkCurrency} during the withdrawal to pay for gas in future transactions.",
  "incorrectAmount": "Incorrect amount. Please input a number.",
  "amountIsHigh": "Amount is too high. Max value is {value}.",
  "amountIsLow": "Amount is too low. Min value is {value}.",
  "tokensToReceive": "Tokens to receive",
  "relayer": "Relayer",
  "relayerTooltip": "Use the relayer service to send your transaction. This option ensures better privacy since the gas fee is subtracted from the deposited funds.",
  "custom": "Custom",
  "pasteYourRelayerUrlorEnsRecord": "Paste your relayer URL or ENS record",
  "wallet": "Wallet",
  "walletTooltip": "Use your own account to initiate a withdrawal (e.g. Metamask or TrustWallet).",
  "save": "Save",
  "reset": "Reset",
  "withdrawWalletWarning": "Make sure that {currency} used to pay for the gas fee is not linkable to ANY of your addresses. Otherwise, the anonymity of the withdrawal will be compromised. We recommend using a Relayer instead.",
  "withdrawalConfirmation": "Withdrawal Confirmation",
  "confirm": "Confirm",
  "yourZkSnarkProofHasBeenSuccesfullyGenerated": "Your zk-Snark proof has been successfully generated! Please click Confirm to initiate the withdrawal",
  "generatingProof": "Generating proof",
  "statistics": "Statistics",
  "anonymitySet": "Anonymity set",
  "anonymitySetTooltip": "Number of deposits from which your withdrawal will potentially originate",
  "latestDeposits": "Latest deposits",
  "yourIP": "Your IP {ip}",
  "filterBy": "Filter by",
  "spent": "Spent",
  "unspent": "Unspent",
  "thereAreNoElements": "There are no elements that meet the filters.",
  "txHash": "Tx Hash",
  "status": "Status",
  "copyNote": "Copy Note",
  "decryptCopyNote": "Decrypt and copy note",
  "v1Deposit": "v1 deposit",
  "waitingForReceipt": "Waiting for receipt",
  "failed": "Failed",
  "withdrawn": "Withdrawn",
  "deposited": "Deposited",
  "removeFromCache": "Remove from cache",
  "pleaseMakeSureYouHaveBackedUpYourNote": "Please make sure you have backed up your note if it has not already been spent. Do you still want to remove this transaction and the note from Browser storage?",
  "remove": "Remove",
  "noteHasBeenDeleted": "Note information has been deleted",
  "accountHasBeenDeleted": "Account information has been deleted",
  "cancelButton": "Cancel",
  "donationsAddress": "Donations address:",
  "rate": "Pool Rate",
  "only": "Only",
  "equalUserDeposit": "{only} {n} {equalUserDepositText}",
  "equalUserDepositPlural": "There are no deposits | One deposit | equal user deposits",
  "userDeposit": "no deposits | only 1 deposit | {n} deposits",
  "gasPrice": "Gas Price",
  "totalFee": "Total fee",
  "networkFee": "Network fee",
  "connectYourWalletFirst": "Connect your wallet first",
  "changeNetwork": "Change network",
  "changeNetworkNote": "Your note is from another network, please change network in the app.",
  "changingNetwork": "Changing network",
  "relayerShouldSupportSSL": "The relayer should support SSL",
  "relayerStatusOk": "Relayer status: OK",
  "proposalIsActive": "Proposal status must be active",
  "canNotFetchStatusFromTheRelayer": "Cannot fetch status from the relayer",
  "thisRelayerServesADifferentNetwork": "This relayer serves a different network",
  "compliance": "Compliance",
  "complianceTool": "compliance tool",
  "complianceReport": "Compliance Report",
  "complianceSubtitle": "Maintaining financial privacy is essential to preserving our freedom.{newline}However, it should not come at the cost of non-compliance. With Tornado.cash, you can always provide cryptographically verified proof of transactional history using the Ethereum address you used to deposit or withdraw funds. This might be necessary to show the source of assets held in your withdrawal address.{newline}To generate a compliance report, please enter your Tornado.сash Note below.",
  "from": "From",
  "to": "To",
  "withdrawal": "Withdrawal",
  "noteHasNotBeenSpent": "The note has not been spent",
  "thereIsNoRelatedDeposit": "There is no related deposit. The note is invalid.",
  "warning": "Warning",
  "doNotShareYouNote": "Do not share your Note with anyone since it WILL be used to withdraw your funds!",
  "date": "Date",
  "transaction": "Transaction",
  "commitment": "Commitment",
  "nullifierHash": "Nullifier Hash",
  "verified": "Verified",
  "generatePdfReport": "Generate PDF report",
  "compliancePrintWarning": "This Compliance Report is for informational purposes only. You should confirm the validity of this report by using Tornado’s Compliance Tool (https://tornadocash.eth.link/compliance) or via any other cryptographic software that can compute and verify the information contained herein(the \"Tornado Compliance Tool\"). Any discrepancies between information found in this report and provided by the above tool indicate that the information in this report may be inaccurate and/or fraudulent.{newline}THE COMPLIANCE REPORT IS PROVIDED \"AS IS,\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OF THE TORNADO.CASH COMPLIANCE TOOL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THIS COMPLIANCE REPORT.",
  "relayRequestFailed": "Relayer {relayerName} is down. Please choose a different relayer.",
  "selectProvider": "Select provider",
  "walletDoesNotSupported": "The wallet is not supported",
  "fetchGasPriceFailed": "Fetch gasPrice failed",
  "networkIsNotSupported": "Network is not supported",
  "failToGenerateNote": "Failed to generate note",
  "invalidRoot": "Invalid Root",
  "failedToFetchAllDepositEvents": "Failed to fetch all deposit events from contract",
  "unknownError": "Unknown error",
  "unitInvalidValue": "[ethjs-unit] while converting number {value} to wei, invalid value",
  "tooManyDecimalPoints": "[ethjs-unit] while converting number {value} to wei, too many decimal points",
  "tooManyDecimalPlaces": "[ethjs-unit] while converting number {value} to wei, too many decimal places",
  "settings": "Settings",
  "rpc": "RPC endpoint",
  "rpcStatusOk": "RPC status: OK",
  "rpcIsDown": "RPC is down",
  "thisRpcIsForDifferentNetwork": "This RPC is for a different network",
  "rpcSelectError": "All predefined RPCs are down. It's probably a network error. Please select custom RPC in Settings",
  "rpcShouldSupportSSL": "The RPC should support SSL",
  "customRpcPlaceholder": "Paste your RPC URL",
  "customRpc": "Custom",
  "enterRecoveryKey": "Please enter your recovery key",
  "copy": "Copy",
  "thereAreNoTransactions": "There are no transactions yet.",
  "governance": "Voting",
  "delegatedBalance": "Delegated balance",
  "votingPower": "Voting Power",
  "delegated": "Delegated",
  "availableBalance": "Available balance",
  "manage": "Manage",
  "proposals": "Proposals",
  "all": "All",
  "active": "Active",
  "expired": "Expired",
  "pending": "Pending",
  "passed": "Passed",
  "timeLocked": "Time locked",
  "createProposal": "Create proposal",
  "startDate": "Start Date",
  "endDate": "End Date",
  "quorum": "Quorum",
  "quorumTooltip": "A proposal's voting period lasts {days}. The proposal is passed only if majority vote and quorum of {votes} voters are reached (sum of For + Against votes is greater than {votes}).",
  "for": "For",
  "against": "Against",
  "title": "Title",
  "description": "Description",
  "proposalAddress": "Proposal Address",
  "lock": "Lock",
  "unlock": "Unlock",
  "proposalThresholdError": "Locked balance should be more or equal to {PROPOSAL_THRESHOLD} TORN",
  "castYourVote": "Cast your vote",
  "back": "Back",
  "yourCurrentVote": "Your current vote: {vote}",
  "currentResults": "Current results",
  "information": "Info",
  "amountToLock": "Amount to lock",
  "amountToUnlock": "Amount to unlock",
  "lockedBalance": "Locked balance",
  "lockedBalanceError": "Your locked balance must be greater than 0",
  "lockTabDesc": "In order to participate in Governance, you must lock TORN tokens. Your voting power will be equivalent to how many tokens you lock.",
  "unlockTabDesc": "You can unlock your previously locked TORN here. If the proposal in which you participated is not yet completed, you may have to wait until it is in order to unlock all your TORN.",
  "delegateTabDesc": "You can delegate your voting power to a delegatee. The delegatee will be able to participate in Governance on your behalf.",
  "undelegateTabDesc": "You can revoke the voting power from your delegatee. Their previous proposals and cast votes will remain unchanged.",
  "recipient": "Recipient",
  "address": "Address",
  "delegate": "Delegate",
  "undelegate": "Undelegate",
  "currentDelegate": "Current delegate",
  "approve": "Approve",
  "approved": "Approved",
  "proposalTitle": "Proposal Title",
  "proposalDescription": "Proposal Description",
  "defeated": "Defeated",
  "accountSaving": "Setting up the Note Account",
  "accountSaved": "Note Account saved on chain",
  "creatingProposal": "Creating proposal",
  "proposalCreated": "Proposal successfully created",
  "depositing": "Depositing {value}",
  "withdrawing": "Withdrawing {value}",
  "claiming": "Claiming {value}",
  "withdrawnValue": "Withdrawn {value}",
  "claimedValue": "Claimed {value}",
  "depositedValue": "Deposited {value}",
  "locking": "Locking",
  "votingFor": "Voting For",
  "votingAgainst": "Voting Against",
  "votedFor": "Successfully voted for the proposal",
  "votedAgainst": "Successfully voted against the proposal",
  "unlocking": "Unlocking",
  "unlocked": "Unlocked",
  "delegating": "Delegating",
  "undelegating": "Undelegating",
  "undelegated": "Undelegated",
  "viewOnEtherscan": "View on Etherscan",
  "awaitingExecution": "Awaiting Execution",
  "execute": "Execute",
  "executeProposal": "Execute proposal",
  "executingProposal": "Executing Proposal",
  "locked": "locked",
  "lockedNotice": "Locked",
  "proposalExecuted": "Proposal successfully executed",
  "pleaseLockBalance": "Please lock TORN tokens first in order to delegate",
  "pleaseDelegate": "Delegatee has not being set",
  "internalError": "Internal Error. Please refresh the page and try again",
  "id": "ID",
  "timerRemainingForPending": "Time remaining before voting starts",
  "timerRemainingForVoting": "Time remaining for voting",
  "timerRemainingForAwaitingExecution": "Time remaining before execution",
  "timerRemainingForExecution": "Execution time remaining",
  "accepted": "Accepted",
  "sent": "Sent",
  "mined": "Mined",
  "confirmed": "Confirmed",
  "pleaseLockTornFirst": "Please lock TORN tokens first to proceed",
  "tokensLockedUntil": "Your balance is locked until {date}",
  "onlyOneProposalErr": "Only one active proposal is allowed per user. Please wait until your current proposal is finished.",
  "max": "Max",
  "withDisconnectedWallet": "Please, connect a wallet or change the type of withdrawal",
  "relayerError": "Selected relayer could not sent your tx. Please try again or choose a different relayer in settings.",
  "relayerIsNotResponding": "Relayer is not responding. Please try again or choose a different relayer in settings.",
  "transactionFailed": "Transaction failed",
  "none": "none",
  "queued": "Queued",
  "proposal": {
    "error": {
      "address": "Value must be an address",
      "contract": "The address must be a contract",
      "title": "Title is required",
      "description": "Description is required"
    }
  },
  "executed": "Executed",
  "proposalDoesNotExist": "The proposal doesn't exist. Please go back to the list.",
  "errorPage": {
    "title": "Oooops!",
    "description": "Page not found.",
    "button": "Launch App",
    "switchNetwork": {
      "pageName": {
        "governance": "Tornado Cash Governance"
      },
      "description": "There is not {pageName} on the selected network. Please switch to Ethereum Mainnet.",
      "button": "Switch network"
    }
  },
  "rejectedRequest": "You rejected {description} request",
  "updateCacheEvents": "Syncing deposit events. Please wait",
  "notEnoughTokens": "The total fee is higher than the amount of tokens to be received. This could be due to high relayer's fee or temporary network congestion.",
  "gasPriceSlider": {
    "low": "Slow",
    "standard": "Standard",
    "fast": "Fast"
  },
  "decrypt": "Decrypt",
  "account": {
    "title": "Note Account",
    "description": "A Note Account allows to store encrypted on-chain backups of private notes. This makes safe storage of funds hassle- and stress-free with the security of the Ethereum blockchain backing each note.",
    "button": "Account",
    "account": "Note account",
    "backedUpWith": "Backed up with",
    "modals": {
      "recoverAccount": {
        "title": "Connect with Note Account key",
        "description": "Please enter your Note Account key to import your previously setup account.",
        "warning": "Invalid Note Account key.",
        "connect": "Connect"
      },
      "setupAccount": {
        "title": "Account setup",
        "label": "Note Account key",
        "description": "This key is used to encrypt and store your Tornado.cash private notes on Ethereum blockchain. Please back it up and never share it with anyone.",
        "setupAccount": "Setup account",
        "setAccount": "Finish",
        "backedUp": "I backed up the Note Account key",
        "saveOnChain": "Create additional on-chain backup of your Note Account key with your wallet",
        "isNotSupportedWithHw": "Please keep in mind, additional on-chain backup of your Note Account is not supported with hardware wallets or mobile wallets",
        "successfulNotice": "Congratulations! You have successfully set up a Note Account. Now, you can encrypt your notes and store them on chain.",
        "yourRecoveryKeyWontBeSaved": "Your recovery key won't be saved in browser cache, please make sure it's backed up."
      },
      "showRecoveryKey": {
        "title": "Current Note Account key",
        "description": "",
        "close": "Close"
      },
      "checkRecoveryKey": {
        "title": "Session update",
        "description": "The Note Account session has been inactive for 5 minutes. Would you like to continue?",
        "inactiveDescription": "You have been inactive for a long time. Your Note Account session has been terminated for security reasons.",
        "no": "No",
        "yes": "Yes"
      },
      "decryptInfo": {
        "title": "Your notes",
        "description": "All notes are successfully downloaded and decrypted using your Note Account key",
        "all": "Total events downloaded:",
        "warning": "Notes with warning:",
        "close": "Close",
        "unSpent": "Your unspent notes found:",
        "spent": "Your spent notes found:",
        "redirect": "Main page"
      },
      "removeAccount": {
        "title": "Clear account information",
        "description": "Remove account information from current browser's session",
        "cancel": "Cancel",
        "remove": "Remove"
      }
    },
    "wallet": {
      "label": "Connected Web3 wallet",
      "desc": "Connect your Web3 wallet",
      "disconnect": "Disconnect from your wallet",
      "rpcDesc": "Change your Ethereum RPC Provider",
      "connectWeb3": "Connect Web3",
      "logout": "Logout",
      "changeRpc": "Change RPC"
    },
    "setup": {
      "decrypt": "Please confirm decrypt request in Web3 wallet.",
      "setTooltip": "An account is already associated with this Web3 wallet. Please use 'Recover Account' below.",
      "recTooltip": "Please set up an account. There is no account for this address.",
      "desc": "Set up Note Account for storing encrypted notes on Ethereum blockchain",
      "account": "Set up account",
      "recoverDesc": "Recover Note Account associated with this Web3 wallet",
      "recover": "Recover account",
      "enterRawDesc": "Use previously set Note Account key",
      "enterRaw": "Enter account key",
      "accSetupDescription": "This key is used to encrypt and store your Tornado.cash private notes on Ethereum blockchain. Please back it up and never share it with anyone."
    },
    "control": {
      "balance": "Note account balance: {value}",
      "loadAllDesc": "Load and decrypt all of your private notes with current Note Account key",
      "loadAll": "Load all encrypted notes",
      "showRecoveryKeyDesc": "Reveal current Note Account key",
      "showRecoveryKey": "Reveal",
      "removeDesc": "Remove account information from current browser's session",
      "remove": "Clear account info",
      "fileDesc": "Download raw private notes by default when you make a deposit"
    },
    "notification": {
      "text": "Tornado.cash added on-chain note backups. Setup your {note} now or {medium} info.",
      "link": {
        "note": "note account",
        "medium": "read more"
      }
    }
  },
  "saveNote": "Save your note",
  "pleaseSetUpAccount": "To decrypt your note please provide an account",
  "decryptNote": "Please confirm note decryption",
  "decryptFailed": "Decryption failed. Please try to log in with a different account",
  "recoverFromKeyTitle": "Current Note Account key",
  "trezorNotSupported": "Trezor wallet is not currently supported",
  "ledgerNotSupported": "Ledger wallet is not currently supported",
  "startDecryptingNotes": "Starting note decryption",
  "decryptingNotes": "Decrypting notes",
  "getAndValidateEvents": "Receiving and validating {name} events",
  "notConnected": "Not connected",
  "regular": "Regular",
  "encrypted": "Encrypted",
  "notDecryptedWithBackup": "This note is encrypted by {address} note account, which is linked to {backup} metamask account. Please switch to decrypt.",
  "notDecrypted": "This note is encrypted by {address} note account, please switch to it.",
  "noteAccountKey": "Decryption failed. Connect to {address} metamask account for decrypting the Note Account key {noteAddress}.",
  "yourEncrypted": "This note will be encrypted with {address} account.",
  "lockTooltip": "This note stored on-chain is encrypted. It can be recovered by the Note Account {address}.",
  "connected": "Connected",
  "accountConnected": "Note Account",
  "web3connected": "Web3 connected",
  "haveAccountSetupWithWallet": "It looks like you already have an Account setup with current Web3 wallet. Please use 'Recover account' option",
  "connectAccount": "Connect Note Account",
  "fetchFile": "Cannot fetch proving keys, please check your internet connection or try to use VPN.",
  "mobileWallet": {
    "reconnect": {
      "message": "Your current connection will be terminated and you will need to reconnect through WalletConnect. Please make sure {networkName} is selected in your wallet before reconnecting.",
      "action": "Reconnect"
    },
    "loading": {
      "alert": "If you have not received a notification in your wallet, please reconnect your wallet",
      "action": "Reconnect"
    },
    "actions": {
      "disabled": "This feature is currently not supported by mobile wallets."
    }
  },
  "missingENSSubdomain": "Missing ENS subdomain",
  "dayPlural": "0 days | {n} day | {n} days",
  "stakingReward": {
    "title": "Staking Reward",
    "label": {
      "tab": "Claim",
      "input": "Available staking reward"
    },
    "description": "You can claim your staking reward here. Your earned reward is proportionate to your locked TORN in governance.",
    "action": "Claim"
  },
  "relayerTotal": {
    "label": "Current Relayer",
    "name": "Name",
    "fee": "Fee"
  },
  "withdrawalQueueIsOverloaded": "Withdrawal queue is overloaded"
}
